{"name":"Selfspy","body":"### What is this?\r\nSelfspy is a daemon for Unix/X11 that continuously monitors and stores what you are doing on your computer. This way, you can get all sorts of nifty statistics and reminders on what you have been up to. It is inspired by the [Quantified Self](http://en.wikipedia.org/wiki/Quantified_Self)-movement and [Stephen Wolfram's personal key logging](http://blog.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life/).\r\n\r\nSee Example Statistics, below, for some of the fabulous things you can do with this data.\r\n\r\n*If you are a Windows or OSX programmer, I think that it would be fairly easy to get Selfspy to run there too, by creating an alternative to the X11-specific sniff_x.py. If anyone wants to experiment with that, I look forward to your patches.*\r\n\r\n### Installing Selfspy\r\n\r\nEither clone the repository from Github (git clone git://github.com/gurgeh/selfspy), or click on the Download link on http://gurgeh.github.com/selfspy/ to get the Python source.\r\n\r\nSelfspy has a few dependencies on other Python libraries that need to be satisfied. These are documented in the requirements.txt file. If you have *pip* installed, installing the dependencies is a simple matter of running `pip install -r requirements.txt`. You will need subversion installed for pip to install python-xlib.\r\n\r\n### Running Selfspy\r\nYou run selfspy with `./selfspy.py`. You should probably start with `./selfspy.py --help` to get to know the command line arguments. As of this writing, it should look like this:\r\n\r\n```\r\nusage: selfspy.py [-h] [-c FILE] [-p PASSWORD] [-d DATA_DIR] [-n]\r\n\r\nMonitor your computer activities and store them in an encrypted database for\r\nlater analysis or disaster recovery.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -c FILE, --config FILE\r\n                        Config file with defaults. Command line parameters\r\n                        will override those given in the config file. The\r\n                        config file must start with a \"[Defaults]\" section,\r\n                        followed by [argument]=[value] on each line.\r\n  -p PASSWORD, --password PASSWORD\r\n                        Encryption password. If you want to keep your database\r\n                        unencrypted, specify -p \"\" here. If you don't specify\r\n                        a password in the command line arguments or in a\r\n                        config file, a dialog will pop up, asking for the\r\n                        password. The most secure is to not use either command\r\n                        line or config file but instead type it in on startup.\r\n  -d DATA_DIR, --data-dir DATA_DIR\r\n                        Data directory for selfspy, where the database is\r\n                        stored. Remember that Selfspy must have read/write\r\n                        access. Default is ~/.selfspy\r\n  -n, --no-text         Do not store what you type. This will make your\r\n                        database smaller and less sensitive to security\r\n                        breaches. Process name, window titles, window\r\n                        geometry, mouse clicks, number of keys pressed and key\r\n                        timings will still be stored, but not the actual\r\n                        letters. Key timings are stored to enable activity\r\n                        calculation in selfstats.py. If this switch is used,\r\n                        you will never be asked for password.\r\n```\r\n\r\nEverything you do is stored in a Sqlite database in your DATA_DIR. Things that you type (passwords, for example) are generally too sensitive to leave in plain text, so they are encrypted with the supplied password. Other database columns, like process names and window titles, are not encrypted. This makes it faster and easier to search for them later.\r\n\r\nUnless you use the --no-text flag, selfspy will store everything you type in two <a href=\"http://en.wikipedia.org/wiki/Blowfish_(cipher)\">Blowfish</a> encrypted columns in the database.\r\n\r\nNormally you would like Selfspy to start automatically when you launch X. How to do this depends on your system, but it will normally mean editing *~/.xinitrc* or *~/.xsession*. If you run KDE, *~/.kde/Autostart*, is a good place to put startup scripts. When run, Selfspy will immediately spawn a daemon and exit.\r\n\r\n### Example Statistics\r\n*\"OK, so now all this data will be stored, but what can I use it for?\"*\r\n\r\nWhile you can access the Sqlite tables directly or, if you like Python, import `models.py` from the Selfspy directory and use those SqlAlchemy classes, the standard way to query your data is through `selfstats.py`.\r\n\r\nHere are some standard use cases:\r\n\r\n*\"Damn! The browser just threw away everything I wrote, because I was not logged in.\"*\r\n\r\n`selfstats.py --back 30 m --showtext`\r\n\r\nShow me everything I have written the last 30 minutes. This will ask for my password, in order to decrypt the text.\r\n\r\n*\"Hmm.. what is my password for Hoolaboola.com?\"*\r\n\r\n`selfstats.py -T \"Hoolaboola\" -P Google-chrome --showtext`\r\n\r\nThis shows everything I have ever written in Chrome, where the window title contained something with \"Hoolaboola\". The regular expressions are case insensitive, so I actually did not need the caps. If I have written a lot on Hoolaboola, perhaps I can be more specific in the title query, to only get the login page.\r\n\r\n*\"I need to remember what I worked on a few days ago, for my time report.\"*\r\n\r\n`selfstats.py --date 10 --limit 1 d -P emacs --tkeys`\r\n\r\nWhat buffers did I have open in Emacs on the tenth of this month and one day forward? Sort by how many keystrokes I wrote in each. This only works if I have set Emacs to display the current buffer in the window title. In general, try to set your programs (editors, terminals, web apps, ...) to include information on what you are doing in the window title. This will make it easier to search for later. \r\n\r\nOn a related but opposite note: if you have the option, remove information like \"mails unread\" or \"unread count\" (for example in Gmail and Google Reader) from the window titles, to make it easier to group them in --tactive and --tkeys.\r\n\r\n*\"Also, when and how much have I used my computer this last week?\"*\r\n\r\n`selfstats.py -b 1 w --periods 180`\r\n\r\nThis will display my active time periods for the last week. A session is considered inactive when I have not clicked or used the keyboard in 180 seconds. Increase that number to get fewer and larger sessions listed.\r\n\r\n*\"How effective have I been this week?\"*\r\n\r\n`selfstats.py -b 1 w --ratios`\r\n\r\nThis will show ratios informing me about how much I have written per active second and how much I have clicked vs used the keyboard. For me, a lot of clicking means too much browsing or inefficient use of my tools. Track these ratios over time to get a sense of what is normal for you.\r\n\r\n*\"I remember that I wrote something to her about the IP address of our printer a few months ago. I can't quite remember if it was a chat, a tweet, a mail, a facebook post, or what.. Should I search them separately? No.\"*\r\n\r\n`selfstats.py --body printer -s --back 40 w`\r\n\r\nShow the texts where I have used the word printer in the last 10 weeks. If it turns out that the actual IP adress is not in the same text chunk as when you wrote \"printer\", you can note the row ID and use --id \r\n (or --date and --clock) and --limit to show what else you wrote around that time.\r\n\r\n*\"What programs do I use the most?\"*\r\n\r\n`selfstats.py --pactive`\r\n\r\nList all programs I have ever used in order of time active in them.\r\n\r\n*\"Which questions on the website Stack Overflow did I visit yesterday?\"*\r\n\r\n`./selfstats.py -T \"Stack Overflow\" -P Google-chrome --back 32 h --tactive`\r\n\r\nList all window titles that contained \"Stack Overflow\" the last 32 hours. Sort by time active. I add the sorting, not only because I want them sorted, but because otherwise the listing would show a row for each time I visited that title, instead of grouping them together.\r\n\r\n*\"How much have I browsed today?\"*\r\n\r\n`selfstats.py -P Google-chrome --clock 00:00 --tactive`\r\n\r\nThis will show all the different pages I visited in the Chrome browser, ordered by for how long I was active.\r\n\r\n*\"Who needs Qwerty? I am going to make an alternative super-programmer-keymap. I wonder what keys I use the most when I code C++?\"*\r\n\r\n`selfstats.py --key-freq -P Emacs -T cpp`\r\n\r\nThis will list all keys in order of how much I have pressed them in Emacs, while editing a file where the name contained \"cpp\".\r\n\r\n*\"While we are at it, which cpp files have I edited the most this month?\"*\r\n\r\n`selfstats.py -P Emacs -T cpp --tkeys --date 1`\r\n\r\nList all buffers in Emacs that contained \"cpp\", from the first this month and forward. Sort by how much I typed in them.\r\n\r\nSelfstats is a swiss army knife of self knowledge. Experiment with it when you have acquired a few days of data. Remember that if you know SQL or SqlAlchemy, it is easy to construct your own queries against the database to get exactly the information you want, make pretty graphs, etc. There are a few stored properties, like coordinates of a mouse click and window geometry, that you can currently only reach through the database.\r\n\r\n### Selfstats Reference\r\n\r\nThe --help is a beast that right now looks something like this:\r\n\r\n```\r\nusage: selfstats.py [-h] [-c FILE] [-p PASSWORD] [-d DATA_DIR] [-s]\r\n                    [-D DATE [DATE ...]] [-C CLOCK] [-i ID]\r\n                    [-b BACK [BACK ...]] [-l LIMIT [LIMIT ...]] [-m nr]\r\n                    [-T regexp] [-P regexp] [-B regexp] [--ratios] [--clicks]\r\n                    [--key-freqs] [--active [seconds]] [--periods [seconds]]\r\n                    [--pactive [seconds]] [--tactive [seconds]] [--pkeys]\r\n                    [--tkeys]\r\n\r\nCalculate statistics on selfspy data. Per default it will show non-text\r\ninformation that matches the filter. Adding '-s' means also show text. Adding\r\nany of the summary options will show those summaries over the given filter\r\ninstead of the listing. Multiple summary options can be given to print several\r\nsummaries over the same filter. If you give arguments that need to access text\r\n/ keystrokes, you will be asked for the decryption password.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -c FILE, --config FILE\r\n                        Config file with defaults. Command line parameters\r\n                        will override those given in the config file. Options\r\n                        to selfspy goes in the \"[Defaults]\" section, followed\r\n                        by [argument]=[value] on each line. Options specific\r\n                        to selfstats should be in the \"[Selfstats]\" section,\r\n                        though \"password\" and \"data-dir\" are still read from\r\n                        \"[Defaults]\".\r\n  -p PASSWORD, --password PASSWORD\r\n                        Decryption password. Only needed if selfstats needs to\r\n                        access text / keystrokes data. If your database in not\r\n                        encrypted, specify -p=\"\" here. If you don't specify a\r\n                        password in the command line arguments or in a config\r\n                        file, and the statistics you ask for require a\r\n                        password, a dialog will pop up asking for the\r\n                        password. If you give your password on the command\r\n                        line, remember that it will most likely be stored in\r\n                        plain text in your shell history.\r\n  -d DATA_DIR, --data-dir DATA_DIR\r\n                        Data directory for selfspy, where the database is\r\n                        stored. Remember that Selfspy must have read/write\r\n                        access. Default is ~/.selfspy\r\n  -s, --showtext        Also show the text column. This switch is ignored if\r\n                        at least one of the summary options are used. Requires\r\n                        password.\r\n  -D DATE [DATE ...], --date DATE [DATE ...]\r\n                        Which date to start the listing or summarizing from.\r\n                        If only one argument is given (--date 13) it is\r\n                        interpreted as the closest date in the past on that\r\n                        day. If two arguments are given (--date 03 13) it is\r\n                        interpreted as the closest date in the past on that\r\n                        month and that day, in that order. If three arguments\r\n                        are given (--date 2012 03 13) it is interpreted as\r\n                        YYYY MM DD\r\n  -C CLOCK, --clock CLOCK\r\n                        Time to start the listing or summarizing from. Given\r\n                        in 24 hour format as --clock 13:25. If no --date is\r\n                        given, interpret the time as today if that results in\r\n                        sometimes in the past, otherwise as yesterday.\r\n  -i ID, --id ID        Which row ID to start the listing or summarizing from.\r\n                        If --date and/or --clock is given, this option is\r\n                        ignored.\r\n  -b BACK [BACK ...], --back BACK [BACK ...]\r\n                        --back <period> [<unit>] Start the listing or summary\r\n                        this much back in time. Use this as an alternative to\r\n                        --date, --clock and --id. If any of those are given,\r\n                        this option is ignored. <unit> is either \"s\"\r\n                        (seconds), \"m\" (minutes), \"h\" (hours), \"d\" (days) or\r\n                        \"w\" (weeks). If no unit is given, it is assumed to be\r\n                        hours.\r\n  -l LIMIT [LIMIT ...], --limit LIMIT [LIMIT ...]\r\n                        --limit <period> [<unit>]. If the start is given in\r\n                        --date/--clock, the limit is a time period given by\r\n                        <unit>. <unit> is either \"s\" (seconds), \"m\" (minutes),\r\n                        \"h\" (hours), \"d\" (days) or \"w\" (weeks). If no unit is\r\n                        given, it is assumed to be hours. If the start is\r\n                        given with --id, limit has no unit and means that the\r\n                        maximum row ID is --id + --limit.\r\n  -m nr, --min-keys nr  Only allow entries with at least <nr> keystrokes\r\n  -T regexp, --title regexp\r\n                        Only allow entries where a search for this <regexp> in\r\n                        the window title matches something. All regular expressions\r\n                        are case insensitive.\r\n  -P regexp, --process regexp\r\n                        Only allow entries where a search for this <regexp> in\r\n                        the process matches something.\r\n  -B regexp, --body regexp\r\n                        Only allow entries where a search for this <regexp> in\r\n                        the body matches something. Do not use this filter\r\n                        when summarizing ratios or activity, as it has no\r\n                        effect on mouse clicks. Requires password.\r\n  --clicks              Summarize number of mouse button clicks for all\r\n                        buttons.\r\n  --key-freqs           Summarize a table of absolute and relative number of\r\n                        keystrokes for each used key during the time period.\r\n                        Requires password.\r\n  --active [seconds]    Summarize total time spent active during the period.\r\n                        The optional argument gives how many seconds after\r\n                        each mouse click (including scroll up or down) or\r\n                        keystroke that you are considered active. Default is\r\n                        180.\r\n  --ratios [seconds]    Summarize the ratio between different metrics in the\r\n                        given period. \"Clicks\" will not include up or down\r\n                        scrolling. The optional argument is the \"seconds\"\r\n                        cutoff for calculating active use, like --active.\r\n  --periods [seconds]   List active time periods. Optional argument works same\r\n                        as for --active.\r\n  --pactive [seconds]   List processes, sorted by time spent active in them.\r\n                        Optional argument works same as for --active.\r\n  --tactive [seconds]   List window titles, sorted by time spent active in\r\n                        them. Optional argument works same as for --active.\r\n  --pkeys               List processes sorted by number of keystrokes.\r\n  --tkeys               List window titles sorted by number of keystrokes.\r\n\r\nSee the README file or http://gurgeh.github.com/selfspy for examples.\r\n```\r\n\r\n### Email\r\nTo monitor that Selfspy works as it should and to continuously get feedback on yourself, it is good to  regularly mail yourself some statistics. I think the easiest way to automate this is using [sendEmail](http://www.debianadmin.com/how-to-sendemail-from-the-command-line-using-a-gmail-account-and-others.html), which can do neat stuff like send through your Gmail account.\r\n\r\nFor example, put something like this in your weekly [cron](http://clickmojo.com/code/cron-tutorial.html) jobs:\r\n`/(PATH_TO_FILE)/selfstats.py --back 1 w --ratios 900 --periods 900 | /usr/bin/sendEmail -q -u \"Weekly selfstats\" <etc..>`\r\nThis will give you some interesting feedback on how much and when you have been active this last week and how much you have written vs moused, etc.","tagline":"Log everything you do on the computer, for statistics, future reference and all-around fun!","google":"UA-30803515-1","note":"Don't delete this file! It's used internally to help with page regeneration."}